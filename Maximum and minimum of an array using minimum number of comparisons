
Input: arr[] = {3, 5, 4, 1, 9}
Output: Minimum element is: 1
              Maximum element is: 9

Input: arr[] = {22, 14, 8, 17, 35, 3}
Output:  Minimum element is: 3
         Maximum element is: 35
----------------------------------------------------------------------------------------------------------------------------------------------              
import java.util.*;

class Main {
	public static void main(String args[]) {
		Scanner z=new Scanner(System.in);
        int n=z.nextInt();
		int arr[] = new int[n];
        for(int i=0;i<n;i++)
            arr[i]=z.nextInt();
        Arrays.sort(arr);
		
		System.out.println("Minimum element is " + arr[0]);
		System.out.println("Maximum element is " + arr[n-1]);
	}
}

---------------------------------------------------------------------------
import java.util.Arrays;

class Pair {
	public int min;
	public int max;
}

class Main {
	static Pair fun(int arr[], int n) {
		Pair obj = new Pair();
		Arrays.sort(arr);
		obj.min = arr[0];
		obj.max = arr[n - 1];
		return obj;
	}
 
	public static void main(String args[]) {
		Scanner z=new Scanner(System.in);
        int n=z.nextInt();
		int arr[] = new int[n];
        for(int i=0;i<n;i++)
            arr[i]=z.nextInt();
		Pair x = fun(arr, n);
		System.out.println("Minimum element is " + x.min);
		System.out.println("Maximum element is " + x.max);
	}
}
--------------------------------------------------------------------------------------  
Linear search:
Time Complexity: O(n)
Auxiliary Space: O(1)
public class PM {
    
	static class Pair {
		int min;
		int max;
	}

	static Pair fun(int arr[], int n) {
		Pair obj = new Pair();
		int i;

		if (n == 1) {
			obj.max = arr[0];
			obj.min = arr[0];
			return obj;
		}

		if (arr[0] > arr[1]) {
			obj.max = arr[0];
			obj.min = arr[1];
		} else {
			obj.max = arr[1];
			obj.min = arr[0];
		}

		for (i = 2; i < n; i++) {
			if (arr[i] > obj.max) {
				obj.max = arr[i];
			} else if (arr[i] < obj.min) {
				obj.min = arr[i];
			}
		}

		return obj;
	}


	public static void main(String args[]) {
		Scanner z=new Scanner(System.in);
        int n=z.nextInt();
		int arr[] = new int[n];
        for(int i=0;i<n;i++)
            arr[i]=z.nextInt();
		Pair x = fun(arr, n);
		System.out.println("Minimum element is " + x.min);
		System.out.println("Maximum element is " + x.max);
	}
}

-----------------------------------------------------------------------------------------------------------
Maximum and minimum of an array using the tournament method:(binary search method with recursion)
Divide the array into two parts and compare the maximums and minimums of the two parts to get the maximum and the minimum of the whole array.
Time Complexity: O(n)
Auxiliary Space: O(log n)
public class PM {

	static class Pair {

		int min;
		int max;
	}

	static Pair fun(int arr[], int low, int high)
	{
		Pair obj = new Pair();
		Pair l = new Pair();
		Pair r = new Pair();
		int mid;

		if (low == high) {
			obj.max = arr[low];
			obj.min = arr[low];
			return obj;
		}

		/* If there are two elements */
		if (high == low + 1) {
			if (arr[low] > arr[high]) {
				obj.max = arr[low];
				obj.min = arr[high];
			}
			else {
				obj.max = arr[high];
				obj.min = arr[low];
			}
			return obj;
		}

		
		mid = (low + high) / 2;
		l = fun(arr, low, mid);
		r = fun(arr, mid + 1, high);

	
		if (l.min < r.min) {
			obj.min = l.min;
            obj.max = r.max;
		}
		else {
			obj.min = r.min;
            obj.max = l.max;
		}
		return obj;
	}

	public static void main(String args[]) {
		Scanner z=new Scanner(System.in);
        int n=z.nextInt();
		int arr[] = new int[n];
        for(int i=0;i<n;i++)
            arr[i]=z.nextInt();
		Pair x = fun(arr,0, n-1);
		System.out.println("Minimum element is " + x.min);
		System.out.println("Maximum element is " + x.max);
	}
}

-------------------------------------------------------------------------------------------------------------------------------------
Maximum and minimum of an array by comparing in pairs:

Time Complexity: O(n)
Auxiliary Space: O(1)

class Pair {
	public int min;
	public int max;
}
public class Main {

	static Pair fun(int arr[], int n) {
		Pair obj = new Pair();
		int i;
		/* If array has even number of elements then
	initialize the first two elements as minimum and
	maximum */
		if (n % 2 == 0) {
			if (arr[0] > arr[1]) {
				obj.max = arr[0];
				obj.min = arr[1];
			} else {
				obj.min = arr[0];
				obj.max = arr[1];
			}
			i = 2;
			/* set the starting index for loop */
		} /* If array has odd number of elements then
	initialize the first element as minimum and
	maximum */ else {
			obj.min = arr[0];
			obj.max = arr[0];
			i = 1;
			/* set the starting index for loop */
		}

		/* In the while loop, pick elements in pair and
	compare the pair with max and min so far */
		while (i < n - 1) {
			if (arr[i] > arr[i + 1]) {
				if (arr[i] >obj.max) {
					obj.max = arr[i];
				}
				if (arr[i + 1] <obj.min) {
					obj.min = arr[i + 1];
				}
			} else {
				if (arr[i + 1] > obj.max) {
					obj.max = arr[i + 1];
				}
				if (arr[i] < obj.min) {
					obj.min = arr[i];
				}
			}
			i += 2;
			/* Increment the index by 2 as two
			elements are processed in loop */
		}

		return obj;
	}


	public static void main(String args[]) {
		Scanner z=new Scanner(System.in);
        int n=z.nextInt();
		int arr[] = new int[n];
        for(int i=0;i<n;i++)
            arr[i]=z.nextInt();
		Pair x = fun(arr, n);
		System.out.println("Minimum element is " + x.min);
		System.out.println("Maximum element is " + x.max);
	}
}
